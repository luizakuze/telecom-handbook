# do ff_d_run_msim_rtl_vhdl.do
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Copying /opt/intelFPGA/20.1/modelsim_ae/linuxaloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# 
# vcom -93 -work work {/home/luiza.k12/eld2/estudo_p1/refazendo-circuitos/ff/nFF.vhd}
# Model Technology ModelSim - Intel FPGA Edition vcom 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 02:46:57 on Jul 09,2024
# vcom -reportprogress 300 -93 -work work /home/luiza.k12/eld2/estudo_p1/refazendo-circuitos/ff/nFF.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package NUMERIC_STD
# -- Compiling entity nFF
# -- Compiling architecture with_process of nFF
# -- Compiling architecture with_generate of nFF
# -- Loading entity nFF
# -- Compiling architecture without_generate of nFF
# -- Loading entity nFF
# -- Compiling configuration cfg_ff_teste
# -- Loading entity nFF
# -- Loading architecture without_generate of nFF
# End time: 02:46:57 on Jul 09,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# 
# stdin: <EOF>
vsim work.nff(without_generate)
# vsim work.nff(without_generate) 
# Start time: 02:47:02 on Jul 09,2024
# //  ModelSim - Intel FPGA Edition 2020.1 Feb 28 2020 Linux 4.19.0-27-amd64
# //
# //  Copyright 1991-2020 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim - Intel FPGA Edition and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.numeric_std(body)
# Loading work.nff(without_generate)
add wave -position end  sim:/nff/N
add wave -position end  sim:/nff/clk
add wave -position end  sim:/nff/rst
add wave -position end  sim:/nff/d
add wave -position end  sim:/nff/q
force -freeze sim:/nff/rst 1 0
force -freeze sim:/nff/rst 1 0, 0 20
force -freeze sim:/nff/clk 1 0, 0 {50 ps} -r 100
force -freeze sim:/nff/d 100 0
run 1000
